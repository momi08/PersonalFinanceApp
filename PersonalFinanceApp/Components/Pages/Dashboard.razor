@using PersonalFinanceApp.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.JSInterop
@inject Pagination<Transaction> Pagination

@page "/dashboard"
@inject IJSRuntime JSRuntime
@inject NavigationManager UriHelper
@inject AppDbContext DbContext
@inject IServiceProvider ServiceProvider
@rendermode InteractiveServer

<h3>Welcome to Your Dashboard</h3>

@if (string.IsNullOrEmpty(UserName))
{
    <p>Loading...</p>
}
else
{
    <p>Welcome, @UserName!</p>
    <h4>Your Current Balance: €@Balance</h4>

    <div class="balance-controls">
        <button class="btn btn-warning" @onclick="ToggleManualBalanceForm">Add to Balance</button>
        <button class="btn btn-danger" @onclick="ResetBalance">Reset Balance</button>
    </div>

    @if (IsManualBalanceVisible)
    {
        <div class="manual-balance-form">
            <EditForm Model="@manualBalance" OnValidSubmit="HandleManualBalanceSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="balanceAmount">Amount</label>
                    <InputNumber id="balanceAmount" @bind-Value="manualBalance.Amount" class="form-control" />
                </div>
                <button type="submit" class="btn btn-success">Add Balance</button>
            </EditForm>
        </div>
    }

    <div class="user-info">
        <h5>Your Recent Transactions:</h5>
        <div>
            <h5>Filter By:</h5>
            <InputSelect @bind-Value="selectedFilterOption" class="form-control">
                <option value="All">All</option>
                <option value="Income">Income</option>
                <option value="Expense">Expense</option>
                @foreach (var category in Categories)
                {
                    <option value="@category">@category</option>
                }
            </InputSelect>
            <button class="btn btn-primary mt-2" @onclick="ApplyFilter">Apply Filter</button>
        </div>

        @if (Pagination.CurrentPageItems.Any())
        {
            <ul>
                @foreach (var transaction in Pagination.CurrentPageItems)
                {
                    <li>
                        @transaction.Description - @transaction.Amount (€@transaction.Type) on @transaction.Date.ToString("yyyy-MM-dd HH:mm:ss")
                        <button class="btn btn-danger btn-sm" @onclick="() => ShowDeleteConfirmation(transaction)">Delete</button>
                    </li>
                }
            </ul>

            <!-- Pagination Controls -->
            <div class="pagination-controls">
                <button class="btn btn-secondary" @onclick="Pagination.PreviousPage" disabled="@(!Pagination.HasPreviousPage())">Previous</button>
                <span>Page @Pagination.PageIndex + 1 of @Pagination.TotalPages</span>
                <button class="btn btn-secondary" @onclick="Pagination.NextPage" disabled="@(!Pagination.HasNextPage())">Next</button>
            </div>
        }
        else
        {
            <p>No transactions found.</p>
        }
    </div>

    @if (IsDeleteConfirmationVisible)
    {
        <div class="delete-confirmation-popup">
            <h4>Are you sure you want to delete this transaction?</h4>
            <button class="btn btn-danger" @onclick="DeleteTransaction">Yes, Delete Transaction</button>
            <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
        </div>
    }

    <button class="btn btn-primary" @onclick="ShowTransactionForm">Add Transaction</button>

    @if (IsTransactionFormVisible)
    {
        <div class="transaction-form">
            <h5>Add New Transaction</h5>
            <EditForm Model="@newTransaction" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="description">Description</label>
                    <InputText id="description" @bind-Value="newTransaction.Description" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="amount">Amount</label>
                    <InputNumber id="amount" @bind-Value="newTransaction.Amount" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="category">Category</label>
                    <InputSelect id="category" @bind-Value="newTransaction.Category" class="form-control">
                        <option value="">Select a Category</option>
                        @foreach (var category in Categories)
                        {
                            <option value="@category">@category</option>
                        }
                    </InputSelect>
                </div>

                <div class="form-group">
                    <label for="type">Type</label>
                    <InputSelect id="type" @bind-Value="newTransaction.Type" class="form-control">
                        <option value="Income">Income</option>
                        <option value="Expense">Expense</option>
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label for="date">Date</label>
                    <InputDate id="date" @bind-Value="newTransaction.Date" class="form-control" />
                </div>

                <button type="submit" class="btn btn-success">Save Transaction</button>
            </EditForm>
        </div>
    }

    <button class="btn btn-primary" @onclick="Logout">Logout</button>
}

@code {
    private string UserName { get; set; }
    private decimal Balance { get; set; }
    private List<Transaction> Transactions { get; set; } = new List<Transaction>();
    private List<Transaction> FilteredTransactions { get; set; } = new List<Transaction>(); // Filtered list
    private bool IsTransactionFormVisible { get; set; } = false;
    private bool IsManualBalanceVisible { get; set; } = false;
    private bool IsDeleteConfirmationVisible { get; set; } = false;
    private Transaction TransactionToDelete { get; set; }

    private List<string> Categories { get; set; } = new List<string>
    {
        "Housing", "Food", "Transportation", "Health & Medical", "Insurance", "Entertainment",
        "Clothing", "Personal Care", "Education", "Debt Repayment", "Savings & Investments",
        "Childcare", "Pets", "Travel"
    };

    private string selectedFilterOption = "All";
    private Transaction newTransaction = new Transaction();
    private Transaction manualBalance = new Transaction();
    private bool isDatabaseOperationInProgress = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isDatabaseOperationInProgress)
        {
            isDatabaseOperationInProgress = true;
            try
            {
                UserName = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userName");

                if (string.IsNullOrEmpty(UserName))
                {
                    UriHelper.NavigateTo("/login");
                }
                else
                {
                    await LoadUserDataAsync();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
            finally
            {
                isDatabaseOperationInProgress = false;
            }

            StateHasChanged();
        }
    }

    private async Task LoadUserDataAsync()
    {
        Transactions = await DbContext.Transactions
            .Where(t => t.UserName == UserName)
            .OrderByDescending(t => t.Date) // Sort by most recent first
            .ToListAsync();

        // Initialize pagination with all transactions
        Pagination.SetPagination(Transactions);
        Balance = Transactions
            .Where(t => t.UserName == UserName)
            .Sum(t => t.Type == "Income" ? t.Amount : -t.Amount);
    }

    // Toggle the visibility of the manual balance form
    private void ToggleManualBalanceForm()
    {
        IsManualBalanceVisible = !IsManualBalanceVisible;
    }

    // Handle submission of manual balance addition
    private async Task HandleManualBalanceSubmit()
    {
        if (manualBalance.Amount <= 0) return;

        var manualTransaction = new Transaction
            {
                UserName = UserName,
                Amount = manualBalance.Amount,
                Category = "Manual Balance",
                Type = "Income",
                Date = DateTime.Now,
                Description = "Manual Balance Addition"
            };

        Balance += manualBalance.Amount;

        DbContext.Transactions.Add(manualTransaction);
        await DbContext.SaveChangesAsync();

        Transactions.Add(manualTransaction);
        Pagination.SetPagination(Transactions); // Update pagination after adding transaction
        manualBalance = new Transaction();
        IsManualBalanceVisible = false;

        StateHasChanged();
    }

    // Show the transaction form
    private void ShowTransactionForm()
    {
        IsTransactionFormVisible = true;
        newTransaction.Date = DateTime.Now;
    }

    // Apply filter when "Apply Filter" button is clicked
    private void ApplyFilter()
    {
        var filterOption = selectedFilterOption;

        if (filterOption == "All")
        {
            FilteredTransactions = new List<Transaction>(Transactions);
        }
        else if (filterOption == "Income")
        {
            FilteredTransactions = Transactions.Where(t => t.Type == "Income").ToList();
        }
        else if (filterOption == "Expense")
        {
            FilteredTransactions = Transactions.Where(t => t.Type == "Expense").ToList();
        }
        else if (Categories.Contains(filterOption))
        {
            FilteredTransactions = Transactions.Where(t => t.Category == filterOption).ToList();
        }

        // Update pagination based on filtered transactions
        Pagination.SetPagination(FilteredTransactions);
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        if (isDatabaseOperationInProgress || string.IsNullOrEmpty(newTransaction.Description) || newTransaction.Amount == 0 || newTransaction.Date == default)
        {
            return;
        }

        // Ensure the Type is set correctly
        if (string.IsNullOrEmpty(newTransaction.Type))
        {
            newTransaction.Type = "Income"; // Default to "Income"
        }

        isDatabaseOperationInProgress = true;

        try
        {
            newTransaction.UserName = UserName;

            // Adjust balance based on transaction type
            if (newTransaction.Type == "Income")
            {
                Balance += newTransaction.Amount;
            }
            else if (newTransaction.Type == "Expense")
            {
                Balance -= newTransaction.Amount;
            }

            DbContext.Transactions.Add(newTransaction);
            await DbContext.SaveChangesAsync();

            Transactions.Add(newTransaction);
            Pagination.SetPagination(Transactions); // Update pagination after adding transaction

            newTransaction = new Transaction(); // Reset transaction form
            IsTransactionFormVisible = false; // Hide transaction form
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isDatabaseOperationInProgress = false;
        }

        StateHasChanged();
    }

    private async Task ResetBalance()
    {
        Balance = 0;
        Transactions.Clear();

        var resetTransaction = new Transaction
            {
                UserName = UserName,
                Amount = 0,
                Category = "Balance Reset",
                Type = "Expense",
                Date = DateTime.Now,
                Description = "Balance Reset"
            };

        DbContext.Transactions.Add(resetTransaction);
        await DbContext.SaveChangesAsync();

        StateHasChanged();
    }

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "userName");
        UriHelper.NavigateTo("/login");
    }

    private void ShowDeleteConfirmation(Transaction transaction)
    {
        TransactionToDelete = transaction;
        IsDeleteConfirmationVisible = true;
    }

    private async Task DeleteTransaction()
    {
        if (TransactionToDelete == null) return;

        // Remove the transaction from the database
        DbContext.Transactions.Remove(TransactionToDelete);
        await DbContext.SaveChangesAsync();

        // Remove the transaction from the list
        Transactions.Remove(TransactionToDelete);

        // Recalculate the balance after the deletion
        Balance = Transactions
            .Where(t => t.UserName == UserName)
            .Sum(t => t.Type == "Income" ? t.Amount : -t.Amount);

        // Update pagination after deletion
        Pagination.SetPagination(Transactions);

        // Close the confirmation dialog
        IsDeleteConfirmationVisible = false;
        StateHasChanged();
    }

    private void CancelDelete()
    {
        IsDeleteConfirmationVisible = false;
        StateHasChanged();
    }
}
