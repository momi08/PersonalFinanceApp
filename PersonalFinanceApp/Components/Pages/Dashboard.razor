@using PersonalFinanceApp.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Authorization;
@inject IJSRuntime JSRuntime
@inject NavigationManager UriHelper
@inject AppDbContext DbContext
@inject IServiceProvider ServiceProvider
@inject AuthenticationStateProvider AuthStateProvider
@inject SavingsGoalService SavingsGoalService
@inject UserService UserService
@inject TransactionService TransactionService

@page "/dashboard"
@rendermode InteractiveServer

@if (string.IsNullOrEmpty(UserName))
{
    <p>Loading...</p>
}
else
{
    <h2>Welcome, @UserName!</h2>
    <h2>Your Current Balance: €@Balance</h2>
    @if (IsManualBalanceVisible)
    {
        @if (ErrorMessages.Any())
        {
            <div class="alert alert-danger">
                <ul>
                    @foreach (var message in ErrorMessages)
                    {
                        <li>@message</li>
                    }
                </ul>
            </div>
        }

        <div class="manual-balance-form">
            <EditForm Model="@manualBalance" OnValidSubmit="HandleManualBalanceSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="balanceAmount">Amount</label>
                    <InputNumber id="balanceAmount" @bind-Value="manualBalance.Amount" class="input" />
                </div>
                <button type="submit" class="btn">Add Balance</button>
            </EditForm>
        </div>
    }
    <div class="balance-controls">
        <button class="btn" @onclick="ToggleManualBalanceForm">Add to Balance</button>
        <button class="btn" @onclick="ResetBalance">Reset Balance</button>
    </div>

    <div class="tab-content" style="margin-top: 30px;">
        <div class="tabs">
            <a class="tab @(currentTab == 1 ? "active" : "")" @onclick="() => SetCurrentTab(1)">
                Transactions
            </a>
            <a class="tab @(currentTab == 2 ? "active" : "")" @onclick="() => SetCurrentTab(2)">
                Saving Goals
            </a>
            <a class="tab @(currentTab == 3 ? "active" : "")" @onclick="() => SetCurrentTab(3)">
                Filtered Transactions
            </a>
        </div>
        @if (currentTab == 1)
        {
            <div class="tab-pane active">
                <h3>Your Transactions</h3>
                <button class="btn" @onclick="ShowTransactionForm">Add Transaction</button>

                @if (IsTransactionFormVisible)
                {
                    <div class="transaction-form">
                        <h3>Add New Transaction</h3>
                        @if (ErrorMessages.Any())
                        {
                            <div class="alert alert-danger">
                                <ul>
                                    @foreach (var message in ErrorMessages)
                                    {
                                        <li>@message</li>
                                    }
                                </ul>
                            </div>
                        }

                        <EditForm Model="@newTransaction" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group">
                                <label for="description">Description</label>
                                <InputText id="description" @bind-Value="newTransaction.Description" class="input" />
                            </div>

                            <div class="form-group">
                                <label for="amount">Amount</label>
                                <InputNumber id="amount" @bind-Value="newTransaction.Amount" class="input" />
                            </div>

                            <div class="form-group">
                                <label for="category">Category</label>
                                <InputSelect id="category" @bind-Value="newTransaction.Category" class="input">
                                    <option value="">Select a Category</option>
                                    @foreach (var category in Categories)
                                    {
                                        <option value="@category">@category</option>
                                    }
                                </InputSelect>
                            </div>

                            <div class="form-group">
                                <label for="type">Type</label>
                                <InputSelect id="type" @bind-Value="newTransaction.Type" class="input">
                                    <option value="Income">Income</option>
                                    <option value="Expense">Expense</option>
                                </InputSelect>
                            </div>

                            <div class="form-group">
                                <label for="date">Date</label>
                                <InputDate id="date" @bind-Value="newTransaction.Date" class="input" />
                            </div>

                            <button type="submit" class="btn">Save Transaction</button>
                        </EditForm>
                    </div>
                }

                @if (isRecentTransactionsVisible)
                {
                    <div class="transaction-list">
                        <h3>Recent Transactions</h3>
                        @foreach (var transaction in Transactions.Take(15))
                        {
                            <div class="transaction-item">
                                <p class="transaction-text">
                                    @transaction.Description - €@transaction.Amount (@transaction.Category) (@transaction.Type) on @transaction.Date.ToString("yyyy-MM-dd HH:mm:ss")
                                </p>
                                <div class="transaction-buttons">
                                    @if (!transaction.IsManuallyAdded)
                                    {
                                        <button class="btn" @onclick="() => ShowEditTransactionForm(transaction)">
                                            Edit
                                        </button>
                                    }
                                    <button class="btn delete-btn" @onclick="() => ShowDeleteConfirmation(transaction)">Delete</button>
                                </div>
                            </div>
                        }
                    </div>
                }
                @if (IsTransactionEditFormVisible)
                {
                    @if (ErrorMessages.Any())
                    {
                        <div class="alert alert-danger">
                            <ul>
                                @foreach (var message in ErrorMessages)
                                {
                                    <li>@message</li>
                                }
                            </ul>
                        </div>
                    }
                    <div class="transaction-form">
                        <h5>Edit Transaction</h5>
                        <EditForm Model="@transactionToEdit" OnValidSubmit="HandleEditTransaction">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="form-group">
                                <label for="description">Description</label>
                                <InputText id="description" @bind-Value="transactionToEdit.Description" class="form-control" />
                            </div>
                            <div class="form-group">
                                <label for="amount">Amount</label>
                                <InputNumber id="amount" @bind-Value="transactionToEdit.Amount" class="form-control" />
                            </div>
                            <div class="form-group">
                                <label for="category">Category</label>
                                <InputSelect id="category" @bind-Value="transactionToEdit.Category" class="form-control">
                                    <option value="">Select a Category</option>
                                    @foreach (var category in Categories)
                                    {
                                        <option value="@category">@category</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="form-group">
                                <label for="type">Type</label>
                                <InputSelect id="type" @bind-Value="transactionToEdit.Type" class="form-control">
                                    <option value="Income">Income</option>
                                    <option value="Expense">Expense</option>
                                </InputSelect>
                            </div>
                            <div class="form-group">
                                <label for="date">Date</label>
                                <InputDate id="date" @bind-Value="transactionToEdit.Date" class="form-control" />
                            </div>
                            <button type="submit" class="btn btn-success">Save Changes</button>
                            <button class="btn btn-secondary" @onclick="CancelEditTransaction">Cancel</button>
                        </EditForm>
                    </div>
                }

                @if (IsDeleteConfirmationVisible)
                {
                    <div class="delete-confirmation-popup">
                        <h4>Are you sure you want to delete this transaction?</h4>
                        <button class="btn btn-danger" @onclick="DeleteTransaction">Yes, Delete Transaction</button>
                        <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    </div>
                }
            </div>
        }

        @if (currentTab == 2)
        {
            <div class="tab-pane active">
                <h3>Your Savings Goals</h3>
                <EditForm Model="@savingsGoal" OnValidSubmit="UpdateSavingsGoal">
                    <DataAnnotationsValidator />

                    <div class="form-group">
                        <label for="goalAmount">Goal Amount (€)</label>
                        <InputNumber id="goalAmount" @bind-Value="savingsGoal.GoalAmount" class="input" />
                    </div>

                    <div class="form-group">
                        <label for="currentSavings">Current Savings (€)</label>
                        <InputNumber id="currentSavings" @bind-Value="savingsGoal.CurrentSavings" class="input" />
                    </div>

                    <button type="submit" class="btn">Update Goal</button>
                </EditForm>

                <div>
                    <p>Progress: @savingsProgress%</p>
                    <progress value="@savingsProgress" max="100"></progress>
                </div>
            </div>
        }

        @if (currentTab == 3)
        {
            <div class="tab-pane active">
                <h3>Filtered Transactions</h3>
                <div class="filter-controls">
                    <div class="form-group">
                        <label for="searchKeyword">Search by Description</label>
                        <InputText id="searchKeyword" @bind-Value="searchKeyword" class="input" />
                    </div>

                    <div class="form-group">
                        <label for="dateRange">Date Range</label>
                        <div class="date-range">
                            <InputDate @bind-Value="startDate" class="input" />
                            <InputDate @bind-Value="endDate" class="input" />
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="filterType">Category</label>
                        <InputSelect @bind-Value="selectedCategory" class="input">
                            <option value="All">All</option>
                            @foreach (var category in Categories)
                            {
                                <option value="@category">@category</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-group">
                        <label for="filterType">Type</label>
                        <InputSelect @bind-Value="selectedType" class="input">
                            <option value="All">All</option>
                            <option value="Income">Income</option>
                            <option value="Expense">Expense</option>
                        </InputSelect>
                    </div>

                    <button class="btn" @onclick="ApplyEnhancedFilter">Apply Filter</button>
                </div>

                @if (FilteredTransactions.Any())
                {
                    <ul class="transaction-list">
                        @foreach (var transaction in FilteredTransactions)
                        {
                            <li class="transaction-item">
                                @transaction.Description - €@transaction.Amount (@transaction.Category) (@transaction.Type) on @transaction.Date.ToString("yyyy-MM-dd HH:mm:ss")
                                <div class="transaction-buttons">
                                    @if (!transaction.IsManuallyAdded)
                                    {
                                        <button class="btn" @onclick="() => ShowEditTransactionForm(transaction)">
                                            Edit
                                        </button>
                                    }
                                    <button class="btn delete-btn" @onclick="() => ShowDeleteConfirmation(transaction)">Delete</button>
                                </div>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p>No transactions found.</p>
                }
                @if (IsTransactionEditFormVisible)
                {
                    @if (ErrorMessages.Any())
                    {
                        <div class="alert alert-danger">
                            <ul>
                                @foreach (var message in ErrorMessages)
                                {
                                    <li>@message</li>
                                }
                            </ul>
                        </div>
                    }
                    <div class="transaction-form">
                        <h5>Edit Transaction</h5>
                        <EditForm Model="@transactionToEdit" OnValidSubmit="HandleEditTransaction">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="form-group">
                                <label for="description">Description</label>
                                <InputText id="description" @bind-Value="transactionToEdit.Description" class="form-control" />
                            </div>
                            <div class="form-group">
                                <label for="amount">Amount</label>
                                <InputNumber id="amount" @bind-Value="transactionToEdit.Amount" class="form-control" />
                            </div>
                            <div class="form-group">
                                <label for="category">Category</label>
                                <InputSelect id="category" @bind-Value="transactionToEdit.Category" class="form-control">
                                    <option value="">Select a Category</option>
                                    @foreach (var category in Categories)
                                    {
                                        <option value="@category">@category</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="form-group">
                                <label for="type">Type</label>
                                <InputSelect id="type" @bind-Value="transactionToEdit.Type" class="form-control">
                                    <option value="Income">Income</option>
                                    <option value="Expense">Expense</option>
                                </InputSelect>
                            </div>
                            <div class="form-group">
                                <label for="date">Date</label>
                                <InputDate id="date" @bind-Value="transactionToEdit.Date" class="form-control" />
                            </div>
                            <button type="submit" class="btn btn-success">Save Changes</button>
                            <button class="btn btn-secondary" @onclick="CancelEditTransaction">Cancel</button>
                        </EditForm>
                    </div>
                }

                @if (IsDeleteConfirmationVisible)
                {
                    <div class="delete-confirmation-popup">
                        <h4>Are you sure you want to delete this transaction?</h4>
                        <button class="btn btn-danger" @onclick="DeleteTransaction">Yes, Delete Transaction</button>
                        <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    </div>
                }
            </div>
        }
    </div>
}
@code {
    private string UserName { get; set; }
    private decimal Balance { get; set; }
    private List<Transaction> Transactions { get; set; } = new List<Transaction>();
    private List<Transaction> FilteredTransactions { get; set; } = new List<Transaction>();
    private bool IsTransactionFormVisible { get; set; } = false;
    private bool IsManualBalanceVisible { get; set; } = false;
    private bool IsTransactionEditFormVisible { get; set; } = false;
    private bool IsDeleteConfirmationVisible { get; set; } = false;
    private Transaction TransactionToDelete { get; set; }
    private Transaction transactionToEdit = new Transaction();
    private bool isRecentTransactionsVisible { get; set; } = true;
    private bool isFilteredTransactionsVisible { get; set; } = false;
    private List<string> ErrorMessages { get; set; } = new List<string>();
    private SavingsGoal savingsGoal;
    private int savingsProgress => savingsGoal.GoalAmount == 0 ? 0 : (int)((savingsGoal.CurrentSavings / savingsGoal.GoalAmount) * 100);
    private string searchKeyword = "";
    private DateTime? startDate = null;
    private DateTime? endDate = null;
    private List<string> Categories { get; set; } = new List<string>
    {
        "Housing", "Salary", "Food", "Transportation", "Health & Medical", "Insurance", "Entertainment",
        "Clothing", "Personal Care", "Education", "Debt Repayment", "Savings & Investments",
        "Childcare", "Pets", "Travel"
    };
    private Transaction newTransaction = new Transaction();
    private Transaction manualBalance = new Transaction();
    private bool isDatabaseOperationInProgress = false;
    private string selectedCategory = "All";
    private string selectedType = "All";
    private int currentTab = 1; 

    private void SetCurrentTab(int tabNumber)
    {
        currentTab = tabNumber;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isDatabaseOperationInProgress)
        {
            isDatabaseOperationInProgress = true;
            try
            {
                UserName = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userName");

                if (string.IsNullOrEmpty(UserName))
                {
                    UriHelper.NavigateTo("/login");
                }
                else
                {
                    await LoadUserDataAsync();
                    await LoadSavingsGoal();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
            finally
            {
                isDatabaseOperationInProgress = false;
                StateHasChanged();
            }
        }
    }

    private async Task LoadSavingsGoal()
    {
        savingsGoal = await SavingsGoalService.LoadSavingsGoalAsync(UserName);
    }

    private async Task LoadUserDataAsync()
    {
        var (transactions, balance) = await UserService.LoadUserDataAsync(UserName);

        Transactions = transactions;
        FilteredTransactions = new List<Transaction>(transactions);
        Balance = await TransactionService.RecalculateBalanceAsync(UserName);
    }

    private void ToggleManualBalanceForm()
    {
        IsManualBalanceVisible = !IsManualBalanceVisible;
    }

    private async Task HandleManualBalanceSubmit()
    {
        ErrorMessages.Clear();
        var (success, newBalance, errorMessages, updatedTransactions) = await TransactionService.HandleManualBalanceSubmitAsync(UserName, manualBalance.Amount, Transactions);

        if (!success)
        {
            ErrorMessages.AddRange(errorMessages);
            StateHasChanged();
            return;
        }
        Balance = newBalance;
        Transactions = updatedTransactions;
        FilteredTransactions = new List<Transaction>(Transactions);
        manualBalance = new Transaction();
        IsManualBalanceVisible = false;
        SortTransactions();
        StateHasChanged();
    }

    private async Task UpdateSavingsGoal()
    {
        bool isUpdated = await SavingsGoalService.UpdateSavingsGoalAsync(UserName, savingsGoal.GoalAmount, savingsGoal.CurrentSavings, ErrorMessages);

        if (isUpdated)
        {
            StateHasChanged();
        }
        else
        {
            StateHasChanged();
        }
    }

    private void ShowRecentTransactions()
    {
        isRecentTransactionsVisible = true;
        isFilteredTransactionsVisible = false;
    }

    private void SortTransactions()
    {
        Transactions = Transactions.OrderByDescending(t => t.Date).ToList();
        FilteredTransactions = new List<Transaction>(Transactions);
        StateHasChanged();
    }

    private void ShowFilteredTransactions()
    {
        SortTransactions();
        isRecentTransactionsVisible = false;
        isFilteredTransactionsVisible = true;
    }

    private void ShowTransactionForm()
    {
        ErrorMessages.Clear();
        IsTransactionFormVisible = true;
        newTransaction.Date = DateTime.Now;
    }

    private void ShowEditTransactionForm(Transaction transaction)
    {
        ErrorMessages.Clear();
        transactionToEdit = new Transaction
            {
                Id = transaction.Id,
                UserName = transaction.UserName,
                Description = transaction.Description,
                Amount = transaction.Amount,
                Category = transaction.Category,
                Type = transaction.Type,
                Date = transaction.Date
            };
        IsTransactionEditFormVisible = true;
        StateHasChanged();
    }

    private async Task HandleEditTransaction()
    {
        ErrorMessages.Clear();
        var (success, errorMessages) = await TransactionService.HandleEditTransactionAsync(
            transactionToEdit,
            Transactions,
            Balance,
            ErrorMessages
        );
        if (!success)
        {
            ErrorMessages = errorMessages;
        }
        else
        {
            FilteredTransactions = Transactions.Where(t => t.UserName == UserName).ToList();
            Balance = await TransactionService.RecalculateBalanceAsync(UserName);
            IsTransactionEditFormVisible = false;
        }
        StateHasChanged();
    }

    private void CancelEditTransaction()
    {
        ErrorMessages.Clear();
        IsTransactionEditFormVisible = false;
        StateHasChanged();
    }

    private void ApplyEnhancedFilter()
    {
        if (startDate.HasValue && endDate.HasValue && endDate.Value < startDate.Value)
        {
            endDate = startDate;
        }
        if (endDate.HasValue)
        {
            endDate = endDate.Value.Date.AddDays(1).AddMilliseconds(-1);
        }
        FilteredTransactions = Transactions.Where(t =>
            (string.IsNullOrEmpty(searchKeyword) || t.Description.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase)) &&
            (!startDate.HasValue || t.Date >= startDate.Value) &&
            (!endDate.HasValue || t.Date <= endDate.Value) &&
            (selectedType == "All" || t.Type == selectedType) &&
            (selectedCategory == "All" || t.Category == selectedCategory)
        ).ToList();

        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        ErrorMessages.Clear();
        var (isSuccess, errorMessages, updatedFilteredTransactions) = await TransactionService.HandleValidSubmitAsync(UserName, Balance, newTransaction, Transactions);

        if (!isSuccess)
        {
            ErrorMessages = errorMessages;
        }
        else
        {
            newTransaction = new Transaction();
            FilteredTransactions = updatedFilteredTransactions;
            Balance = updatedFilteredTransactions.Sum(t => t.Type == "Income" ? t.Amount : -t.Amount);
            IsTransactionFormVisible = false;
        }
        SortTransactions();
        StateHasChanged();
    }

    private async Task ResetBalance()
    {
        try
        {
            await TransactionService.ResetBalanceAsync(UserName, Transactions, FilteredTransactions);
            Balance = 0;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error resetting balance: {ex.Message}");
        }
    }

    private void ShowDeleteConfirmation(Transaction transaction)
    {
        TransactionToDelete = transaction;
        IsDeleteConfirmationVisible = true;
        StateHasChanged();
    }

    private async Task DeleteTransaction()
    {
        if (TransactionToDelete == null) return;

        var (isSuccess, newBalance) = await TransactionService.DeleteTransactionAsync(TransactionToDelete, UserName, Transactions, FilteredTransactions);

        if (isSuccess)
        {
            Balance = newBalance;
            IsDeleteConfirmationVisible = false;
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Error deleting transaction.");
        }
    }

    private void CancelDelete()
    {
        IsDeleteConfirmationVisible = false;
        StateHasChanged();
    }
}