@using Microsoft.EntityFrameworkCore
@using PersonalFinanceApp.Data
@using Microsoft.AspNetCore.Components.Authorization
@rendermode InteractiveServer

@page "/register"
@inject NavigationManager UriHelper
@inject AppDbContext DbContext
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<h3>Register</h3>

<div>
    <input class="m-3" placeholder="Enter username" @bind="UserName" />
</div>
<div>
    <input type="password" class="m-3" placeholder="Enter password" @bind="Password" />
</div>
<div>
    <input type="password" class="m-3" placeholder="Confirm password" @bind="ConfirmPassword" />
</div>
<button class="btn btn-primary m-3" @onclick="RegisterUser">Register</button>

@if (!string.IsNullOrEmpty(PasswordError))
{
    <p style="color: red;">@PasswordError</p>
}

@if (!string.IsNullOrEmpty(GeneralError))
{
    <p style="color: red;">@GeneralError</p>
}

@code {
    private string UserName { get; set; }
    private string Password { get; set; }
    private string ConfirmPassword { get; set; }
    private string PasswordError { get; set; }
    private string GeneralError { get; set; }

    private async Task RegisterUser()
    {
        PasswordError = string.Empty;
        GeneralError = string.Empty;

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            GeneralError = "Please log out before registering a new account.";
            return;
        }

        if (string.IsNullOrWhiteSpace(UserName) || string.IsNullOrWhiteSpace(Password) || string.IsNullOrWhiteSpace(ConfirmPassword))
        {
            GeneralError = "All fields are required.";
            return;
        }

        if (string.IsNullOrWhiteSpace(UserName) || UserName.Length < 4)
        {
            PasswordError = "Username must be at least 4 characters long.";
            return;
        }

        if (string.IsNullOrWhiteSpace(Password) || Password.Length < 8)
        {
            PasswordError = "Password must be at least 8 characters long.";
            return;
        }

        if (Password != ConfirmPassword)
        {
            PasswordError = "Passwords do not match.";
            return;
        }

        var existingUser = await DbContext.Users
            .FirstOrDefaultAsync(u => u.UserName == UserName);

        if (existingUser != null)
        {
            GeneralError = "User already exists.";
            return;
        }

        var passwordHasher = new Microsoft.AspNetCore.Identity.PasswordHasher<User>();
        var newUser = new User
            {
                UserName = UserName,
                PasswordHash = passwordHasher.HashPassword(null, Password)
            };

        DbContext.Users.Add(newUser);
        await DbContext.SaveChangesAsync();
        await ((Authentication)AuthStateProvider).MarkUserAsAuthenticated(UserName);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userName", UserName);
        UriHelper.NavigateTo("/dashboard", forceLoad: true);
    }
}