@page "/settings"
@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using PersonalFinanceApp.Data
@inject AppDbContext DbContext
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<h2>Account Settings</h2>

<div>
    <label>Preferred Currency:</label>
    <select @bind="selectedCurrency">
        <option value="USD">USD ($)</option>
        <option value="EUR">EUR (€)</option>
        <option value="GBP">GBP (£)</option>
    </select>
</div>

<button class="btn btn-primary mt-2" @onclick="SaveSettings">Save Preferences</button>
@if (!string.IsNullOrEmpty(saveMessage))
{
    <p>@saveMessage</p>
}

<hr />

<h3>Change Password</h3>
<div>
    <input type="password" class="input-field" placeholder="Current password" @bind="currentPassword" />
    <input type="password" class="input-field" placeholder="New password" @bind="newPassword" />
    <input type="password" class="input-field" placeholder="Confirm new password" @bind="confirmPassword" />
</div>

<button class="btn btn-secondary mt-2" @onclick="ChangePassword">Change Password</button>
@if (!string.IsNullOrEmpty(passwordMessage))
{
    <p>@passwordMessage</p>
}

<hr />

<h3>Login History</h3>
@if (loginHistory.Any())
{
    <ul>
        @foreach (var entry in loginHistory)
        {
            <li>
                <span class="utc-time">@entry.LoginTime.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</span> - @entry.IPAddress
            </li>
        }
    </ul>
}
else
{
    <p>No login history found.</p>
}

@code {
    private string selectedCurrency = "USD";
    private string? saveMessage;
    private string currentPassword;
    private string newPassword;
    private string confirmPassword;
    private string passwordMessage;
    private int? userId;
    private User? currentUser;
    private bool initialized = false;
    private List<LoginHistory> loginHistory = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || initialized)
            return;

        initialized = true;

        var storedUserName = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userName");
        if (string.IsNullOrEmpty(storedUserName))
        {
            saveMessage = "Unable to load user settings. Please log in again.";
            StateHasChanged();
            return;
        }

        currentUser = await DbContext.Users.FirstOrDefaultAsync(u => u.UserName == storedUserName);
        if (currentUser == null)
        {
            saveMessage = "User not found.";
            StateHasChanged();
            return;
        }

        userId = currentUser.Id;

        var settings = await DbContext.UserSettings.FirstOrDefaultAsync(s => s.UserId == userId);
        if (settings != null)
        {
            selectedCurrency = settings.Currency;
        }
        else
        {
            var newSettings = new UserSettings
            {
                UserId = userId.Value,
                Currency = "USD"
            };
            DbContext.UserSettings.Add(newSettings);
            await DbContext.SaveChangesAsync();
        }

        loginHistory = await DbContext.LoginHistories
            .Where(h => h.UserId == userId)
            .OrderByDescending(h => h.LoginTime)
            .Take(10)
            .ToListAsync();

        StateHasChanged();
    }

    private async Task SaveSettings()
    {
        if (userId == null) return;

        var settings = await DbContext.UserSettings.FirstOrDefaultAsync(s => s.UserId == userId);
        if (settings != null)
        {
            settings.Currency = selectedCurrency;
            await DbContext.SaveChangesAsync();
            saveMessage = "Settings saved successfully!";
        }
    }

    private async Task ChangePassword()
    {
        passwordMessage = null;

        if (currentUser == null)
        {
            passwordMessage = "User not found.";
            return;
        }

        var hasher = new Microsoft.AspNetCore.Identity.PasswordHasher<User>();
        var result = hasher.VerifyHashedPassword(null, currentUser.PasswordHash, currentPassword);

        if (result == Microsoft.AspNetCore.Identity.PasswordVerificationResult.Failed)
        {
            passwordMessage = "Current password is incorrect.";
            return;
        }

        if (string.IsNullOrWhiteSpace(newPassword) || newPassword.Length < 8)
        {
            passwordMessage = "New password must be at least 6 characters.";
            return;
        }

        if (newPassword != confirmPassword)
        {
            passwordMessage = "New passwords do not match.";
            return;
        }

        currentUser.PasswordHash = hasher.HashPassword(currentUser, newPassword);
        await DbContext.SaveChangesAsync();

        passwordMessage = "Password changed successfully!";
        currentPassword = newPassword = confirmPassword = string.Empty;
    }
}
