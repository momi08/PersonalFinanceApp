@using Microsoft.EntityFrameworkCore
@using PersonalFinanceApp.Data
@using Microsoft.AspNetCore.Components.Authorization;
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject NavigationManager UriHelper
@inject AppDbContext DbContext
@inject AuthenticationStateProvider AuthStateProvider

<nav class="navbar">
    <div class="navbar-brand">💰 Personal Finance App</div>
    @if (!IsUserLoggedIn)
        {
            <div class="navbar-links">
                <NavLink href="/" Match="NavLinkMatch.All" class="nav-link">Home</NavLink>
                <NavLink href="/register" class="nav-link">Register</NavLink>
                <NavLink href="/login" class="nav-link">Login</NavLink>
            </div>
            <div class="navbar-right">
                <NavLink href="/about" class="nav-link">About</NavLink>
            </div>
        }
        else
        {
            <div class="navbar-links">
                <NavLink href="/dashboard" class="nav-link">Dashboard</NavLink>
                <NavLink href="/reports" class="nav-link">Reports</NavLink>
                <NavLink href="/settings" class="nav-link">Settings</NavLink>
            </div>
        <div class="navbar-right">
            <NavLink href="#" @onclick="Logout" class="nav-link">Logout</NavLink>
        </div>
        }
</nav>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private bool IsUserLoggedIn { get; set; } = false;

    private string userName;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await CheckUserLoginStatus();
    }

    private async Task CheckUserLoginStatus()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        IsUserLoggedIn = user.Identity?.IsAuthenticated ?? false;
        if (IsUserLoggedIn)
        {
            userName = user.Identity?.Name;
        }
        else
        {
            userName = null;
        }

        StateHasChanged();
    }

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "userName");
        await ((Authentication)AuthStateProvider).MarkUserAsLoggedOut();
        UriHelper.NavigateTo("/login", forceLoad: true);
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
